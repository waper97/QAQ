/**   
* 
*/
package com.yj.hqbz.services.impl.goods;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.transaction.Transactional;

import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.yj.common.model.BaseRes;
import com.yj.hqbz.mapper.goods.GoodsMapper;
import com.yj.hqbz.mapper.goods.GoodsPicMapper;
import com.yj.hqbz.mapper.goods.GoodsSKUMapper;
import com.yj.hqbz.mapper.goods.GoodsTypeMapper;
import com.yj.hqbz.model.goods.Goods;
import com.yj.hqbz.model.goods.GoodsPic;
import com.yj.hqbz.model.goods.GoodsSKU;
import com.yj.hqbz.model.goods.GoodsSaleInfo;
import com.yj.hqbz.model.goods.GoodsType;
import com.yj.hqbz.model.org.Organization;
import com.yj.hqbz.model.org.Seller;
import com.yj.hqbz.services.goods.GoodsPicInfoService;
import com.yj.hqbz.services.goods.GoodsSKUService;
import com.yj.hqbz.services.goods.GoodsService;
import com.yj.hqbz.util.UUIDUtil;

/**   
 * @Title: GoodsServiceImpl.java
 * @Package com.yj.hqbz.services.impl.goods 
 * @Description: TODO
 * @author xx   
 * @date 2019-2-27 
 */
@Service
public class GoodsServiceImpl implements GoodsService {
	@Resource
	GoodsMapper goodsMapper;
	@Resource
	GoodsSKUMapper goodsSKUMapper;
	@Resource
	GoodsTypeMapper goodsTypeMapper;
	@Resource
	GoodsPicMapper goodsPicMapper;
	
	
	public PageInfo<Goods> getCustomerCanBuyGoodsListByParam(Map<String,Object> param,int page,int rows){
		PageHelper.startPage(page, rows);
		List<Goods> list = goodsMapper.getCustomerCanBuyGoodsListByParam(param);
		PageInfo<Goods> info=new PageInfo<Goods>(list);
		return info;
	}
	
	
	public List<Goods> getGoodsByGoodsType(Integer typeId) {
		return goodsMapper.getGoodsByGoodsType(typeId);
	}
	
	public int getGoodsCountByGoodsType(Integer typeId) {
		return goodsMapper.getGoodsCountByGoodsType(typeId);
	}

	@Override
	@Transactional
	public void addGoods(Goods goods) {
		goodsMapper.addGoods(goods);
		
		String goodsid = goods.getGoodsid();
		GoodsPic goodsPic=new GoodsPic();
		goodsPic.setPicUrl(goods.getPicUrl());
		goodsPic.setThumbnailUrl(goods.getThumbnailUrl());
		goodsPic.setGoodsid(goodsid);
		goodsPicMapper.addGoodsPicInfo(goodsPic);
		
		//商品sku
		List<GoodsSKU> skuList = goods.getSkuList();
		for (GoodsSKU sku : skuList) {
			String skuid = UUIDUtil.getUUID();
			sku.setSkuid(skuid);
			sku.setGoodsid(goodsid);
			goodsSKUMapper.addGoodsSKU(sku);
			List<GoodsPic> pics = sku.getGoodsPic();
			for (GoodsPic pic : pics) {
				pic.setGoodsid(goodsid);
				pic.setSkuid(skuid);
				goodsPicMapper.addGoodsPicInfo(pic);
			}
		}
	}

	@Override
	@Transactional
	public void updateGoods(Goods goods) {
		goodsMapper.updateGoods(goods);
		
		String goodsid = goods.getGoodsid();
		Map<String , Object> param=new HashMap<>();
		param.put("goodsid", goodsid);
		param.put("skuid", null);
		goodsPicMapper.deletePic(param);
		GoodsPic goodsPic=new GoodsPic();
		goodsPic.setPicUrl(goods.getPicUrl());
		goodsPic.setThumbnailUrl(goods.getThumbnailUrl());
		goodsPic.setGoodsid(goods.getGoodsid());
		goodsPicMapper.addGoodsPicInfo(goodsPic);
		
		//商品sku
		List<GoodsSKU> skuList = goods.getSkuList();
		for (GoodsSKU sku : skuList) {
			if(sku.getSkuid()!=null){
				//为修改
				goodsSKUMapper.updateGoodsSKU(sku);
				List<GoodsPic> pics = sku.getGoodsPic();
				for (GoodsPic pic : pics) {
					param.clear();
					param.put("goodsid", goodsid);
					param.put("skuid", sku.getSkuid());
					goodsPicMapper.deletePic(param);
					pic.setGoodsid(goods.getGoodsid());
					pic.setSkuid(sku.getSkuid());
					goodsPicMapper.addGoodsPicInfo(pic);
				}
			}else{
				//为新增
				String skuid = UUIDUtil.getUUID();
				sku.setSkuid(skuid);
				sku.setGoodsid(goodsid);
				goodsSKUMapper.addGoodsSKU(sku);
				List<GoodsPic> pics = sku.getGoodsPic();
				for (GoodsPic pic : pics) {
					pic.setGoodsid(goodsid);
					pic.setSkuid(skuid);
					goodsPicMapper.addGoodsPicInfo(pic);
				}
			}
			
		}
		
	}

	@Override
	@Transactional
	public void updateGoodsStatus(String goodsId, int status) {
		goodsMapper.updateGoodsStatus(goodsId, status);
		if(status==1){
			//如果商品停用，则全部子规格停用
			List<GoodsSKU> list=goodsSKUMapper.getGoodsSKUByGoodsId(goodsId);
			for (GoodsSKU g : list) {
				goodsSKUMapper.updateGoodsSKUStaus(g.getSkuid(), status);
			}
		}
		//商品启用，子规格状态不变，仍为停用。
	}

	@Override
	@Transactional
	public void deleteGoods(String goodsid) {
		goodsMapper.deleteGoods(goodsid);
	}

	@Override
	public Goods selectByPrimaryKey(String goodsid) {
		return goodsMapper.selectByPrimaryKey(goodsid);
	}

	@Override
	public PageInfo<Goods> getGoodsListByParam(Map<String, Object> param,int page,int rows) {
		
		PageHelper.startPage(page,rows);//分页插件
		//查询商品
		List<Goods> goodsList=new ArrayList<>();
		List<Goods> oneGoods=goodsMapper.getGoodsListByParam(param);
		goodsList.addAll(oneGoods);
		
		Object tid = param.get("typeid");
		if(tid!=null&&tid!=""){
			int fatherTypeid = Integer.parseInt(tid.toString());
			List<GoodsType> list =goodsTypeMapper.getChildGoodsTypes(fatherTypeid);
			for (GoodsType g : list) {
				param.put("typeid", g.getTypeid());
				List<Goods> childGoods=goodsMapper.getGoodsListByParam(param);
				goodsList.addAll(childGoods);
			}
		}
		PageInfo<Goods> pageInfo = new PageInfo<>(goodsList);
		return pageInfo;
		
	}
	
}
