<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

       <context:property-placeholder location="classpath:jdbc.properties"/>
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="driverClassName" value="${jdbc.driverClassName}"/>
        </bean>
    <!--采用setter注入方式-->
        <bean id="bookAction" class="com.waper.action.BookAction">
                <!--在BookAction类中设置 setBookService-->
                <property name="bookService" ref="bookService"/>
        </bean>
        <bean id="bookService" class="com.waper.service.impl.BookServiceImpl">
                <!--在BookAction类中设置
                    public void setBookDao(BookDao bookDao) {
                              this.bookDao = bookDao;
                              }
                -->
                <property name="bookDao" ref="bookDao"/>
        </bean>

        <bean id="bookDao" class="com.waper.dao.BookDaoImpl">
                <property name="sessionFactory" ref="sessionFactory"/>
        </bean>
        <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
                <!--注入数据源-->
                <property name="dataSource" ref="dataSource"/>
                <!--设置hibernate属性-->
                <property name="hibernateProperties">
                        <props>
                                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle12cDialect</prop>
                                <!--是否显示sql-->
                                <prop key="hibernate.show_sql">true</prop>
                                <!--sql格式化-->
                                <prop key="format_sql">true</prop>
                                <!--自动执行操作，update,ceate-->
                                <prop key="hibernate.hbm2ddl.auto">update</prop>
                                <prop key="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:orcl</prop>
                                <prop key="hibernate.connection.driver_class">oracle.jdbc.OracleDriver</prop>
                        </props>
                </property>
                <!--实体存放路径-->
                <property name="packagesToScan">
                    <list>
                        <value>com.waper.entity</value>
                    </list>
                </property>
        </bean>
    <!--配置事务，还需要在在引用sessionFactory类上加@Transactional注解，否则或报错：
         org.hibernate.HibernateException: Could not obtain transaction-synchronized Session for current thread
         原因是 sessionFactory。是从当前上下文中获取Session并且会绑定到当前线程，第一次调用时会创建一个Session实例，
         如果该Session未关闭，后续多次获取的是同一个Session实例；事务提交或者回滚时会自动关闭Sesison,无需人工关闭
    -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>